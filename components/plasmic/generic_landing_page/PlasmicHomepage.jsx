// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tUi91SKLM7F3mDsG9F2SWh
// Component: g9BLWhA5LCMeb
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Section from "../../Section"; // plasmic-import: gio1NWm3pYVVA1/component
import ValueProp from "../../ValueProp"; // plasmic-import: mliw04g7hoJQEv/component
import Button from "../../Button"; // plasmic-import: 01mjekF7qCxWMP/component
import { useScreenVariants as useScreenVariants_8QoaMan3Bj7E37 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 8qoaMan3bj7e37/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_generic_landing_page.module.css"; // plasmic-import: tUi91SKLM7F3mDsG9F2SWh/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: g9BLWhA5LCMeb/css
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: ehj71t7WqbMCVg/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: hNg3PwA52cbNDX/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_8QoaMan3Bj7E37()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Home"}</title>
        <meta key="og:title" property="og:title" content={"Home"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"headerHeroSection"}
            data-plasmic-override={overrides.headerHeroSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.headerHeroSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__zXqJ)}
            >
              <div className={classNames(projectcss.all, sty.column__f67H)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__q5Wob)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fniO)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lOgja
                        )}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2HBxG
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <h2
                          data-plasmic-name={"h2"}
                          data-plasmic-override={overrides.h2}
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2
                          )}
                        >
                          {"Los Pollos Hermanos"}
                        </h2>
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iFfmQ
                      )}
                    >
                      {"Fast food chain restaurant specializing in chicken."}
                    </div>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>
          </p.Stack>

          <Section
            data-plasmic-name={"valuePropsSection"}
            data-plasmic-override={overrides.valuePropsSection}
            className={classNames("__wab_instance", sty.valuePropsSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__uxOro)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lgZsw
                )}
              >
                {
                  "It's the best ingredients. The spiciest spices. All prepared with loving care! And always delivered with a friendly smile. That's the Los Pollos Hermanos promise."
                }
              </div>
            </p.Stack>

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__i1O3J)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pmxbR)}
                >
                  {true ? (
                    <ValueProp
                      className={classNames(
                        "__wab_instance",
                        sty.valueProp__tbEoz
                      )}
                      description={
                        (
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mxGd1
                            )}
                          >
                            {
                              "Porttitor feugiat a scelerisque nullam parturient vestibulum tempor a litora suscipit arcu potenti varius venenatis venenatis dapibus fames adipiscing in in taciti."
                            }
                          </div>
                        ) : null
                      }
                      flatIcon={true}
                      icon={
                        <CheckIcon
                          className={classNames(projectcss.all, sty.svg__rs0Z1)}
                          role={"img"}
                        />
                      }
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gPdwy
                          )}
                        >
                          {"Reliable"}
                        </div>
                      }
                    />
                  ) : null}

                  <ValueProp
                    className={classNames(
                      "__wab_instance",
                      sty.valueProp___9MdYe
                    )}
                    description={
                      (
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1Aliv
                          )}
                        >
                          {
                            "Consequat scelerisque a eros taciti nisl a sodales."
                          }
                        </div>
                      ) : null
                    }
                    flatIcon={true}
                    icon={
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg__mJ9We)}
                        role={"img"}
                      />
                    }
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hPxHz
                        )}
                      >
                        {"Quick Delivery"}
                      </div>
                    }
                  />

                  <ValueProp
                    className={classNames(
                      "__wab_instance",
                      sty.valueProp__uswJa
                    )}
                    description={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6Xo35
                        )}
                      >
                        {"At ut condimentum amet adipiscing ac diam a."}
                      </div>
                    }
                    flatIcon={true}
                    icon={
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg__oH8P)}
                        role={"img"}
                      />
                    }
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fYPbf
                        )}
                      >
                        {"Best and delicious"}
                      </div>
                    }
                  />

                  <ValueProp
                    className={classNames(
                      "__wab_instance",
                      sty.valueProp__muzH
                    )}
                    description={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rA72H
                        )}
                      >
                        {
                          "Donec purus nec vestibulum volutpat vivamus vulputate suspendisse."
                        }
                      </div>
                    }
                    flatIcon={true}
                    icon={
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg__djQAp)}
                        role={"img"}
                      />
                    }
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2LGju
                        )}
                      >
                        {"Worldwide"}
                      </div>
                    }
                  />
                </p.Stack>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__edOhx)}
                  />
                ) : null}
              </p.Stack>
            ) : null}
          </Section>

          <Section
            data-plasmic-name={"checkpointsSection"}
            data-plasmic-override={overrides.checkpointsSection}
            background={"dark"}
            className={classNames("__wab_instance", sty.checkpointsSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__oxg6W)}
              id={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "features"
                  : "features"
              }
            >
              <div className={classNames(projectcss.all, sty.column__zgsVb)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cWoNa)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e2Jhj
                    )}
                  >
                    {"LOS POLLOS HERMANOS"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sdKaK
                    )}
                  >
                    {"FOR ENTERTAINMENT PURPOSES"}
                  </div>

                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    endIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__fcF0N)}
                        role={"img"}
                      />
                    }
                    flat={true}
                    showEndIcon={true}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__e66Vs
                      )}
                      component={Link}
                      href={""}
                      platform={"nextjs"}
                      target={"_blank"}
                    >
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link___0Mak6
                        )}
                        component={Link}
                        href={"https://www.youtube.com/shorts/Y5IFlF9NVNo"}
                        platform={"nextjs"}
                        target={"_blank"}
                        title={""}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yqu4V
                          )}
                        >
                          {"Learn more"}
                        </div>
                      </p.PlasmicLink>
                    </p.PlasmicLink>
                  </Button>
                </p.Stack>
              </div>
            </p.Stack>
          </Section>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroSection",
    "h2",
    "valuePropsSection",
    "checkpointsSection",
    "button"
  ],

  headerHeroSection: ["headerHeroSection", "h2"],
  h2: ["h2"],
  valuePropsSection: ["valuePropsSection"],
  checkpointsSection: ["checkpointsSection", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    h2: makeNodeComponent("h2"),
    valuePropsSection: makeNodeComponent("valuePropsSection"),
    checkpointsSection: makeNodeComponent("checkpointsSection"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
