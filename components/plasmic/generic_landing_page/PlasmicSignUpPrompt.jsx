// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tUi91SKLM7F3mDsG9F2SWh
// Component: 9TaI2dLZLjnx2i
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 01mjekF7qCxWMP/component
import Divider from "../../Divider"; // plasmic-import: F2juTEgTCr2z8q/component
import TextInput from "../../TextInput"; // plasmic-import: RfuTAuNs8j3EaB/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_generic_landing_page.module.css"; // plasmic-import: tUi91SKLM7F3mDsG9F2SWh/projectcss
import sty from "./PlasmicSignUpPrompt.module.css"; // plasmic-import: 9TaI2dLZLjnx2i/css
import GoogleIcon from "./icons/PlasmicIcon__Google"; // plasmic-import: 8yS2mdp0qof065/icon
import WandIcon from "./icons/PlasmicIcon__Wand"; // plasmic-import: _Vw5iVe7FsxtEd/icon

export const PlasmicSignUpPrompt__VariantProps = new Array();

export const PlasmicSignUpPrompt__ArgProps = new Array();

function PlasmicSignUpPrompt__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__qhpX9)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__mlazE)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bVm
            )}
          >
            {"Sign up with"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__c9YlW)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__cTZxV)}
              outline={true}
              showStartIcon={true}
            >
              {"Apple"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__ieXka)}
              outline={true}
              showStartIcon={true}
              startIcon={
                <GoogleIcon
                  className={classNames(projectcss.all, sty.svg__wUXtA)}
                  role={"img"}
                />
              }
            >
              {"Google"}
            </Button>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fT8RL)}
          >
            <Divider
              className={classNames("__wab_instance", sty.divider__xRgTk)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xmJlu
              )}
            >
              {"Or"}
            </div>

            <Divider
              className={classNames("__wab_instance", sty.divider___1V91J)}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__f7Yri)}
          >
            <TextInput
              className={classNames("__wab_instance", sty.textInput__nvScw)}
              placeholder={"Full Name"}
            />

            <TextInput
              className={classNames("__wab_instance", sty.textInput__nbwVk)}
              placeholder={"Email"}
            />

            <TextInput
              className={classNames("__wab_instance", sty.textInput__biMY)}
              placeholder={"Password"}
            />
          </p.Stack>

          <Button
            className={classNames("__wab_instance", sty.button__hUhWp)}
            color={"indigo"}
            endIcon={
              <WandIcon
                className={classNames(projectcss.all, sty.svg__o5Fu)}
                role={"img"}
              />
            }
          >
            {"Start your account"}
          </Button>
        </p.Stack>

        <Divider
          className={classNames("__wab_instance", sty.divider___7QfIr)}
        />

        <div className={classNames(projectcss.all, sty.freeBox___536Gp)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tlynu
            )}
          >
            {
              "A cras sagittis odio vestibulum pulvinar a eget hendrerit id vestibulum a leo sociosqu dictumst dictumst natoque magnis parturient."
            }
          </div>
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSignUpPrompt__ArgProps,
      internalVariantPropNames: PlasmicSignUpPrompt__VariantProps
    });

    return PlasmicSignUpPrompt__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUpPrompt";
  } else {
    func.displayName = `PlasmicSignUpPrompt.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUpPrompt = Object.assign(
  // Top-level PlasmicSignUpPrompt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicSignUpPrompt
    internalVariantProps: PlasmicSignUpPrompt__VariantProps,
    internalArgProps: PlasmicSignUpPrompt__ArgProps
  }
);

export default PlasmicSignUpPrompt;
/* prettier-ignore-end */
